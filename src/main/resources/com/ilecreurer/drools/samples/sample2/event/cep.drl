package com.ilecreurer.drools.samples.sample2.event;

import com.ilecreurer.drools.samples.sample2.event.PositionEvent;

global org.slf4j.Logger LOGGER_DRL;
global Double MIN_DIST

declare PositionEvent
  @role( event )
  @timestamp( timestamp )
  //@duration( callDuration )
  //@expires( 1h35m )
  //@expires( 2m )
end

//rule "insertion"
//salience 100
//when
//    $pe : PositionEvent() from entry-point "PositionEventStream"
//then
//    LOGGER_DRL.debug("New PE: {}, {}", $pe.getIdEvent(),
//        $pe.getIdOwner());
//end

rule "substitution"
salience 90
when
    $pe1 : PositionEvent() from entry-point "PositionEventStream"
    $pe2 : PositionEvent(
                this.getIdOwner().equals($pe1.getIdOwner()),
                !this.getIdEvent().equals($pe1.getIdEvent())
           ) from entry-point "PositionEventStream"
then
    if ($pe1.getTimestamp().getTime() < $pe2.getTimestamp().getTime()) {
        if (LOGGER_DRL.isDebugEnabled()) {
            LOGGER_DRL.debug("Remove PE: [{} - {}]", $pe1.getIdEvent(), $pe1.getIdOwner());
        }
        delete($pe1);
    } else {
        if (LOGGER_DRL.isDebugEnabled()) {
            LOGGER_DRL.debug("Remove PE: [{} - {}]", $pe2.getIdEvent(), $pe2.getIdOwner());
        }
        delete($pe2);
    }
end


rule "collision"
salience 80
when
    $pe1 : PositionEvent() from entry-point "PositionEventStream"
    $pe2 : PositionEvent(this.getIdOwner().compareTo($pe1.getIdOwner()) > 0,
                        ($pe1.diffLat(this) < 1.0 &&
                        $pe1.diffLong(this) < 1.0 &&
                        $pe1.distanceTo(this) < MIN_DIST.doubleValue())
           ) from entry-point "PositionEventStream"
then
    LOGGER_DRL.warn("[{} - {}] is too close to [{} - {}] . Time diff: {} s",
        $pe1.getIdEvent(), $pe1.getIdOwner(),
        $pe2.getIdEvent(), $pe2.getIdOwner(),
        ($pe1.getTimestamp().getTime() - $pe2.getTimestamp().getTime())/1000
    );
end
